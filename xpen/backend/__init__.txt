# ruff: noqa: E501

from __future__ import annotations

import os
import string
from abc import ABC, abstractmethod
from decimal import Decimal
from enum import Enum
from typing import Final, Callable, Any

from PySide6.QtCore import QSize, Qt
from PySide6.QtGui import QColor, QPainter, QPixmap, QMouseEvent
from PySide6.QtWidgets import (
    QDialog,
    QFrame,
    QGraphicsDropShadowEffect,
    QGridLayout,
    QLabel,
    QLineEdit,
    QScrollArea,
    QSizePolicy,
    QVBoxLayout,
    QWidget,
)
from PySide6.QtSvg import QSvgRenderer
from xpen.widget.auxiliary import HoveredBrightnessButton

from xpen.account import Account
from xpen.widget.application import Application


class Page(ABC):
    @abstractmethod
    def get_page_widget(self) -> QWidget:
        raise NotImplementedError()


class PageType(Enum):
    AccountSelection = (0,)
    Record = (1,)
    CalendarView = (2,)
    ChartView = (3,)
    Setting = (4,)


class RecordPage(Page):
    __application: Application

    __page_widget: QWidget
    __page_layout: QVBoxLayout
    __account: Account

    def __init__(self, application: Application, account_name: str):
        self.__application = application

        # pedantic check
        self.__account = application.get_accounts_by_name(account_name)

        self.__page_layout = QVBoxLayout()
        self.__page_layout.setContentsMargins(0, 0, 0, 0)
        self.__page_layout.setSpacing(0)
        self.__page_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        self.__page_widget = QWidget()
        self.__page_widget.setLayout(self.__page_layout)
        self.__page_widget.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding
        )

        # Add account label
        account_label = QLabel("Records")
        account_label.setStyleSheet(
            f"""
            font: 24px;
            color: {self.__application.get_preference().font_color};
            padding: 15px;
            background-color: {self.__application.get_preference().generic_background_1}; 
            """
        )
        account_label.setAlignment(Qt.AlignmentFlag.AlignLeft)

        self.__page_layout.insertWidget(
            0,
            account_label,
        )

    def get_page_widget(self) -> QWidget:
        return self.__page_widget


class NoAccountPage(Page):
    __application: Application

    __no_account_widget: QWidget
    __no_account_layout: QVBoxLayout

    def __init__(self, application: Application):
        self.__application = application

        self.__no_account_widget = QWidget()
        self.__no_account_layout = QVBoxLayout()
        self.__no_account_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # show no account page and prompt user to create one
        pixmap = QPixmap(QSize(50, 50))
        pixmap.fill(Qt.GlobalColor.transparent)
        painter = QPainter(pixmap)
        self.__application.get_resource().account_not_found_symol.render(painter)
        painter.setCompositionMode(painter.CompositionMode.CompositionMode_SourceIn)
        painter.fillRect(
            pixmap.rect(), QColor(self.__application.get_preference().font_color)
        )
        painter.end()

        no_account_symbol = QLabel()
        no_account_symbol.setPixmap(pixmap)
        no_account_symbol.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.__no_account_layout.addWidget(no_account_symbol)

        no_account_text = QLabel("No Accounts Found\n\nCreate New One to Start")
        no_account_text.setAlignment(Qt.AlignmentFlag.AlignCenter)
        no_account_text.setStyleSheet(
            f"""
            font: 16px;
            color: {self.__application.get_preference().font_color};
            """
        )

        self.__no_account_layout.addWidget(no_account_text)
        self.__no_account_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.__no_account_widget.setLayout(self.__no_account_layout)

        self.__no_account_widget.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding
        )

    # pverride
    def get_page_widget(self) -> QWidget:
        return self.__no_account_widget


class AccountSelectionPage(Page):
    __application: Application

    __account_selection_widget: QWidget
    __account_selection_layout: QGridLayout
    __account_selection_scroll: QScrollArea

    def __init__(self, application: Application):
        self.__application = application

        self.__account_selection_scroll = QScrollArea()
        self.__account_selection_widget = QWidget()
        self.__account_selection_layout = QGridLayout()

        self.__account_selection_layout.setSpacing(0)
        self.__account_selection_layout.setContentsMargins(0, 0, 0, 0)

        self.__account_selection_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        def create_header_label(text: str) -> QLabel:
            label = QLabel(text)
            label.setStyleSheet(
                f"""
                font: 12px;
                color: {self.__application.get_preference().font_color};
                padding: 6px 2px 6px 6px;
                font-weight: bold;
                """
            )
            label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
            label.setAlignment(Qt.AlignmentFlag.AlignHCenter)

            return label

        self.__account_selection_layout.addWidget(
            create_header_label("Name"), 0, 0, alignment=Qt.AlignmentFlag.AlignLeft
        )
        self.__account_selection_layout.addWidget(
            create_header_label("Balance"),
            0,
            1,
            alignment=Qt.AlignmentFlag.AlignLeft,
        )
        self.__account_selection_layout.addWidget(
            create_header_label("Last Modified"),
            0,
            2,
            alignment=Qt.AlignmentFlag.AlignLeft,
        )

        self.__account_selection_layout.setColumnStretch(0, 2)
        self.__account_selection_layout.setColumnStretch(1, 1)
        self.__account_selection_layout.setColumnStretch(2, 1)

        line = QFrame()
        line.setFrameShape(QFrame.Shape.HLine)
        line.setFrameShadow(QFrame.Shadow.Plain)
        line.setStyleSheet(
            f"""
            color: {self.__application.get_preference().account_line_separator};
            margin: 0px 8px 0px 8px;
            """
        )
        line.setLineWidth(1)
        line.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        self.__account_selection_layout.addWidget(line, 1, 0, 1, 3)

        accounts = self.__application.get_accounts()
        for index, account in enumerate(accounts):
            account_name = QLabel(account.get_account_name())
            balance = QLabel(f"${account.get_current_balance()}")
            last_modifier = account.get_last_modified()
            date = QLabel(
                f"{last_modifier.day}-{last_modifier.month}-{last_modifier.year} {last_modifier.hour}:{last_modifier.minute}:{last_modifier.second}"
            )
            style_sheet = f"""
                font: 12px;
                padding: 4px 2px 4px 6px;
                color: {self.__application.get_preference().font_color};
            """

            account_name.mousePressEvent = self.__select_account_lambda(
                account.get_account_name()
            )  # type: ignore

            account_name.setStyleSheet(style_sheet)
            balance.setStyleSheet(style_sheet)
            date.setStyleSheet(style_sheet)

            self.__account_selection_layout.addWidget(account_name, 2 + (index * 2), 0)
            self.__account_selection_layout.addWidget(balance, 2 + (index * 2), 1)
            self.__account_selection_layout.addWidget(date, 2 + (index * 2), 2)

            if index != len(accounts) - 1:
                line = QFrame()
                line.setFrameShape(QFrame.Shape.HLine)
                line.setFrameShadow(QFrame.Shadow.Plain)
                line.setContentsMargins(8, 0, 8, 0)
                line.setStyleSheet(
                    f"""QFrame {{
                    color: {self.__application.get_preference().account_line_separator};
                    }}
                    """
                )
                line.setLineWidth(1)
                line.setSizePolicy(
                    QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed
                )
                self.__account_selection_layout.addWidget(
                    line, 3 + (index * 2), 0, 1, 3
                )

        self.__account_selection_widget.setLayout(self.__account_selection_layout)
        self.__account_selection_widget.setSizePolicy(
            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding
        )
        self.__account_selection_scroll.setVerticalScrollBarPolicy(
            Qt.ScrollBarPolicy.ScrollBarAsNeeded
        )
        self.__account_selection_scroll.setHorizontalScrollBarPolicy(
            Qt.ScrollBarPolicy.ScrollBarAlwaysOff
        )
        self.__account_selection_scroll.setWidgetResizable(True)
        self.__account_selection_scroll.setWidget(self.__account_selection_widget)
        # disable border
        self.__account_selection_scroll.setStyleSheet(
            """ 
            QScrollArea {
                border: none;
            }
            """
        )

    def __select_account_lambda(
        self, account_name: str
    ) -> Callable[[QMouseEvent], None]:
        return lambda event: self.__select_account_handler(event, account_name)

    def __select_account_handler(self, mouse_event: QMouseEvent, name: str):
        if mouse_event.button() == Qt.MouseButton.LeftButton:
            print(f"Select account {name}")
            self.__application.go_to_record_page(name)

    def get_page_widget(self) -> QWidget:
        return self.__account_selection_scroll



class SideBarMenu(Page):
    __application: Application

    __side_bar_widget: QWidget
    __side_bar_layout: QVBoxLayout

    MENU_SIZE: Final[int] = 40

    def __init__(self, application: Application) -> None:
        self.__application = application
        self.__side_bar_layout = QVBoxLayout()

        self.__side_bar_layout.setContentsMargins(0, 0, 0, 0)
        self.__side_bar_layout.addWidget(
            self.__create_side_bar_button(
                self.__application.get_resource().account_bar_icon,
                lambda: self.__redirect_to_account_page(),
            )
        )
        self.__side_bar_layout.addWidget(
            self.__create_side_bar_button(
                self.__application.get_resource().record_bar_icon,
                lambda: self.__redirect_to_record_page(),
            )
        )
        self.__side_bar_layout.addWidget(
            HoveredBrightnessButton(
                self.__application.get_resource().calendar_bar_icon,
                QSize(SideBarMenu.MENU_SIZE, SideBarMenu.MENU_SIZE),
            )
        )
        self.__side_bar_layout.addWidget(
            HoveredBrightnessButton(
                self.__application.get_resource().chart_bar_icon,
                QSize(SideBarMenu.MENU_SIZE, SideBarMenu.MENU_SIZE),
            )
        )
        self.__side_bar_layout.addWidget(
            HoveredBrightnessButton(
                self.__application.get_resource().setting_bar_icon,
                QSize(SideBarMenu.MENU_SIZE, SideBarMenu.MENU_SIZE),
            )
        )

        self.__side_bar_layout.addStretch(1)
        self.__side_bar_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)

        self.__side_bar_widget = QWidget()
        self.__side_bar_widget.setFixedWidth(SideBarMenu.MENU_SIZE)
        self.__side_bar_widget.setLayout(self.__side_bar_layout)

        self.__side_bar_widget.setStyleSheet(
            f"background-color: {self.__application.get_preference().sidebar_background_1}"
        )

    def __redirect_to_account_page(self):
        self.__application.go_to_account_page()

    def __redirect_to_record_page(self):
        self.__application.go_to_record_page()

    def __create_side_bar_button(
        self, icon: QSvgRenderer, command: Any
    ) -> HoveredBrightnessButton:
        button = HoveredBrightnessButton(
            icon,
            QSize(SideBarMenu.MENU_SIZE, SideBarMenu.MENU_SIZE),
        )

        button.clicked.connect(command)

        return button

    # override
    def get_page_widget(self) -> QWidget:
        return self.__side_bar_widget


if __name__ == "__main__":
    app = Application()
